@model InmobiliariaWeb.Models.Contratos.MorasMasivoViewModel
@{
    Layout = "_ContratosLayout";
}

<div class="container">
    <div class="card">
        <div class="card-header fw-bold">
            <h2>@ViewBag.NumeroSerie - Moras Masivas</h2>
        </div>
        <div class="card-body">
            <div class="row g-2">
                <div class="col-6 col-sm-6 col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input type="number" class="form-control" id="ImporteMorasTotal" asp-for="ImporteMorasTotal" readonly/>
                        <label for="ImporteMorasTotal">Total Moras</label>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input type="number" class="form-control" id="DescuentoDirecto" asp-for="DescuentoDirecto" onblur="MoraFinal()" />
                        <label for="DescuentoDirecto">Descuento $</label>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input type="number" class="form-control" id="DescuentoPorcentaje" asp-for="DescuentoPorcentaje" onblur="MoraFinal()" />
                        <label for="DescuentoPorcentaje">Descuento %</label>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input type="number" class="form-control" id="NuevoMontoMora" asp-for="NuevoMontoMora" readonly />
                        <label for="NuevoMontoMora">Nuevo Total</label>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input class="form-control" type="date" id="FechaPago" asp-for="@Model.FechaPago" />
                        <label for="FechaPago">Fecha Pago</label>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-md-6 col-lg-6">
                    <div class="form-floating">
                        <select id="Ident_018_TipoPago" class="form-select" asp-for="@Model.Ident_018_TipoPago" onchange="ObtenerTipoPago(this.value)">
                            <option>--SELECCIONE--</option>
                            @foreach (var tipoPago in Model.TipoPagos)
                            {
                                <option value="@tipoPago.Ident_018_TipoPago">@tipoPago.Descripcion</option>
                            }
                        </select>
                        <label for="Ident_018_TipoPago">Tipo de Pago</label>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-md-6 col-lg-6">
                    <div class="form-floating">
                        <select id="Ident_002_TipoMoneda" class="form-select" asp-for="@Model.Ident_002_TipoMoneda" onchange="ValidarTipoCambio(this)">
                            <option>--SELECCIONE--</option>
                            @foreach (var moneda in Model.TipoMonedas)
                            {
                                <option value="@moneda.Ident_002_TipoMoneda">@moneda.Abreviatura</option>
                            }
                        </select>
                        <label for="Ident_002_TipoMoneda">Moneda</label>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-md-6 col-lg-6">
                    <div class="form-floating">
                        <select id="Ident_019_Banco" class="form-select" asp-for="@Model.Ident_019_Banco" onchange="ObtenerCuentasBancarias(this.value)">
                            <option>--SELECCIONE--</option>
                            @foreach (var banco in Model.Bancos)
                            {
                                <option value="@banco.Ident_019_Banco">@banco.Abreviatura</option>
                            }
                        </select>
                        <label for="Ident_019_Banco">Banco</label>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-md-6 col-lg-6">
                    <div class="form-floating">
                        <select id="Ident_CuentasBancarias" class="form-select" asp-for="@Model.Ident_CuentasBancarias" onchange="SeleccionarMoneda(this)">
                            <option>--SELECCIONE--</option>

                        </select>
                        <label for="Ident_CuentasBancarias">N° Cuenta</label>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input type="number" class="form-control" id="TipoCambio" asp-for="@Model.TipoCambio" />
                        <label for="TipoCambio">T.C.</label>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input class="form-control" type="text" id="NumeroOperacion" asp-for="@Model.NumeroOperacion" />
                        <label for="NumeroOperacion">Número Operación</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <partial name="_ValidationScriptsPartial" />
}
<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script>
    function MoraFinal() {
        // Obtener los valores de los elementos por ID
        var importeMorasTotal = parseFloat(document.getElementById("ImporteMorasTotal").value) || 0;
        var descuentoDirecto = parseFloat(document.getElementById("DescuentoDirecto").value) || 0;
        var descuentoPorcentaje = parseFloat(document.getElementById("DescuentoPorcentaje").value) || 0;
        //var importeTotalPagado = parseFloat(document.getElementById("ImporteTotalPagado").value) || 0;

        console.log(importeMorasTotal);
        console.log(descuentoDirecto);
        console.log(descuentoPorcentaje);
        //console.log(importeTotalPagado);

        // Variable para almacenar el nuevo monto de moras
        var nuevoMontoMoras = importeMorasTotal;

        // Caso 1: Ambos descuentos están presentes
        if (descuentoDirecto > 0 && descuentoPorcentaje > 0) {
            nuevoMontoMoras = (importeMorasTotal - descuentoDirecto) - (descuentoPorcentaje * (importeMorasTotal - descuentoDirecto) / 100);
        }
        // Caso 2: Solo descuento directo
        else if (descuentoDirecto > 0 && descuentoPorcentaje <= 0) {
            nuevoMontoMoras = importeMorasTotal - descuentoDirecto;
        }
        // Caso 3: Solo descuento por porcentaje
        else if (descuentoDirecto <= 0 && descuentoPorcentaje > 0) {
            nuevoMontoMoras = importeMorasTotal - (descuentoPorcentaje * importeMorasTotal / 100);
        }

        // Verificar si el resultado es negativo
        if (nuevoMontoMoras < 0) {
            // Mostrar el modal (asegúrate de tener el modal en tu HTML)
            $('#modalError').modal('show');

            // Reiniciar los valores a 0
            document.getElementById("DescuentoDirecto").value = 0;
            document.getElementById("DescuentoPorcentaje").value = 0;

            return; // Salir de la función
        }
        // Asignar el resultado al input con el ID 'NuevoMontoMoras'
        document.getElementById("NuevoMontoMora").value = nuevoMontoMoras.toFixed(2);
        console.log(nuevoMontoMoras);
    }
    function ObtenerTipoPago(tipoPagoId) {
        // Verificamos si el tipo de pago es "EFECTIVO"
        var efectivoOption = 115; // Asegúrate que este valor es el que corresponde a "EFECTIVO"
        // Si se selecciona "EFECTIVO"
        if (tipoPagoId == efectivoOption) {
            // Deshabilitar los campos de banco y cuenta
            document.getElementById('Ident_019_Banco').disabled = true;
            document.getElementById('Ident_CuentasBancarias').disabled = true;
            document.getElementById('NumeroOperacion').disabled = true;

            // Establecer la opción por defecto "--SELECCIONE--" en los select deshabilitados
            document.getElementById('Ident_019_Banco').selectedIndex = 0;
            document.getElementById('Ident_CuentasBancarias').selectedIndex = 0;
            $("#NumeroOperacion").val("");

        } else {
            // Si no es "EFECTIVO", habilitar los campos de banco y cuenta
            document.getElementById('Ident_019_Banco').disabled = false;
            document.getElementById('Ident_CuentasBancarias').disabled = false;
            document.getElementById('NumeroOperacion').disabled = false;
        }
    }
    function ValidarTipoCambio(selectElement) {
        var tipoMonedaSeleccionada = selectElement.value;
        var tipoCambioInput = document.getElementById("TipoCambio");

        // Si el valor seleccionado es vacío (no se seleccionó nada), no hacer nada
        if (tipoMonedaSeleccionada === "") {
            return;
        }

        // Si la opción seleccionada es 23, asigna 1 al Tipo de Cambio
        if (tipoMonedaSeleccionada === "23") {
            tipoCambioInput.value = "1";
        }
        // Si la opción seleccionada es 24, solo valida el Tipo de Cambio
        else if (tipoMonedaSeleccionada === "24") {
            // Si el Tipo de Cambio es menor o igual a 1, muestra una alerta
            if (parseFloat(tipoCambioInput.value) <= 1) {
                alert("Debe ingresar un tipo de cambio mayor a 1.");
                tipoCambioInput.focus();  // Coloca el foco en el campo de tipo de cambio
            }
        }
    }
    let cuentasBancariasData = {};
    function ObtenerCuentasBancarias(Ident_019_Banco) {
        $.get(`/Caja/GetCuentasBancarias?Ident_019_Banco=${Ident_019_Banco}`, function (data) {
            // Limpiar la selección del tipo de moneda
            $("#Ident_002_TipoMoneda").val(""); // Reinicia a "--SELECCIONE--"

            // Limpiar las cuentas bancarias
            cuentasBancariasData = {};
            $("#Ident_CuentasBancarias").empty();
            $("#Ident_CuentasBancarias").append('<option value="">--SELECCIONE--</option>');

            // Agregar las cuentas bancarias al select
            $.each(data, function (index, item) {
                $("#Ident_CuentasBancarias").append(
                    `<option value="${item.ident_CuentasBancarias}">${item.detalleCuenta}</option>`
                );
                cuentasBancariasData[item.ident_CuentasBancarias] = item.ident_002_TipoMoneda;
            });
        });
    }
    function SeleccionarMoneda(selectElement) {
        const cuentaSeleccionada = selectElement.value;

        // Buscar el identificador de la moneda asociada
        const monedaSeleccionada = cuentasBancariasData[cuentaSeleccionada];

        // Seleccionar la moneda en el select de tipo de moneda
        if (monedaSeleccionada) {
            $("#Ident_002_TipoMoneda").val(monedaSeleccionada);
        } else {
            $("#Ident_002_TipoMoneda").val(""); // Limpiar selección si no hay moneda asociada
        }

        // Llamar a la función ValidarTipoCambio para realizar la validación después de cambiar la moneda
        ValidarTipoCambio(document.getElementById("Ident_002_TipoMoneda"));
    }
</script>